basePath: /
definitions:
  models.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  models.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://example.com/support
  description: API for managing Ecommerce
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: Dashboard Ecommerce Team 2
  version: "1.0"
paths:
  /api/banner:
    delete:
      consumes:
      - multipart/form-data
      description: Remove a banner by its ID
      parameters:
      - description: Banner ID
        in: formData
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted banner
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid banner ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to delete banner
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a banner
      tags:
      - Banner
    get:
      consumes:
      - multipart/form-data
      description: Retrieve a specific banner by its ID
      parameters:
      - description: Banner ID
        in: formData
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved banner
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid banner ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to retrieve banner
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get banner by ID
      tags:
      - Banner
    put:
      consumes:
      - multipart/form-data
      description: Toggle the published status of a banner
      parameters:
      - description: Banner ID
        in: formData
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated published banner
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid banner ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to update banner
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update banner published status
      tags:
      - Banner
  /api/create-banner:
    post:
      consumes:
      - multipart/form-data
      description: Create a new banner with image upload
      parameters:
      - description: Banner Title
        in: formData
        name: title
        required: true
        type: string
      - description: Banner Description
        in: formData
        name: description
        type: string
      - description: Banner Image
        in: formData
        name: image_path
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created banner
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid data input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to upload image or create banner
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new banner
      tags:
      - Banner
securityDefinitions:
  Authentication:
    in: header
    name: Authorization
    type: apiKey
  UserID:
    in: header
    name: User-ID
    type: apiKey
swagger: "2.0"
