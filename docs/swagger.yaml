basePath: /
definitions:
  helper.HTTPResponse:
    properties:
      data: {}
      error_msg:
        type: string
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  models.LoginRequest:
    properties:
      email:
        example: johndoe@example.com
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.Order:
    properties:
      payment_method:
        example: credit_card
        type: string
      shipping_address:
        example: 123 Main St
        type: string
      status:
        example: pending
        type: string
      total_amount:
        example: 150.75
        type: number
      user_id:
        example: 1
        type: integer
    required:
    - payment_method
    - status
    - total_amount
    - user_id
    type: object
  models.OrderDetailResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      order:
        $ref: '#/definitions/models.Order'
    type: object
  models.OrderItem:
    properties:
      order_id:
        example: 1
        type: integer
      price:
        example: 75
        type: number
      product_id:
        example: 101
        type: integer
      quantity:
        example: 2
        type: integer
      total:
        type: number
    required:
    - order_id
    - price
    - product_id
    - quantity
    - total
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: johndoe@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://example.com/support
  description: API for managing Ecommerce
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: Dashboard Ecommerce Team 2
  version: "1.0"
paths:
  /api/v1/orders:
    get:
      consumes:
      - application/json
      description: Get a list of all orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
      summary: Get all orders
      tags:
      - orders
  /api/v1/orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the order
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to delete the order
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Delete order by ID
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Get a single order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Order'
      summary: Get order by ID
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update the status of an order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order Status
        example: '"shipped"'
        in: body
        name: status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the order status
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to update order status
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Update order status
      tags:
      - Orders
  /api/v1/orders/{id}/details:
    get:
      consumes:
      - application/json
      description: Get the details of an order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrderDetailResponse'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to fetch order details
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get order detail by ID
      tags:
      - orders
  /auth/check-email:
    get:
      responses:
        "200":
          description: Email check result
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to check user email
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
  /auth/login:
    get:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login Request Body
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "401":
          description: Failed to login user
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: User Login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with a provided request body
      parameters:
      - description: User Registration Request Body
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to create user
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Create a new user
      tags:
      - User
  /auth/reset-password:
    patch:
      consumes:
      - application/json
      description: Reset the password for a user using a provided request body
      parameters:
      - description: User password reset request body
        in: body
        name: resetRequest
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User password reset successfully
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to reset user password
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Reset user password
      tags:
      - User
  /dashboard/best-item-list:
    get:
      description: Retrieve a list of the best-selling products
      produces:
      - application/json
      responses:
        "200":
          description: best product list successfully retrieved
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Error getting best product list
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get best product list
      tags:
      - Dashboard
  /dashboard/current-month-earning:
    get:
      description: Retrieve the earnings for the current month
      produces:
      - application/json
      responses:
        "200":
          description: current month earnings successfully retrieved
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Error getting earnings
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get current month earnings
      tags:
      - Dashboard
  /dashboard/revenue-chart:
    get:
      description: Generate a revenue chart for the dashboard
      produces:
      - text/html
      responses:
        "200":
          description: HTML revenue chart
          schema:
            type: string
        "500":
          description: Error generating revenue chart
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get revenue chart
      tags:
      - Dashboard
  /dashboard/summary:
    get:
      description: Retrieve a summary of the dashboard
      produces:
      - application/json
      responses:
        "200":
          description: dashboard summary successfully retrieved
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Error getting summary
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get dashboard summary
      tags:
      - Dashboard
securityDefinitions:
  Authentication:
    in: header
    name: Authorization
    type: apiKey
  UserID:
    in: header
    name: User-ID
    type: apiKey
swagger: "2.0"
